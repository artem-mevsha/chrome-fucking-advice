{"version":3,"sources":["app/js/FuckingGreatAdvice/index.js","app/js/Popup/index.js","app/js/index.js","app/js/popup.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9DA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlHA;AAAA","file":"src/js/app.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FuckingGreatAdvice = function () {\n  function FuckingGreatAdvice(url) {\n    _classCallCheck(this, FuckingGreatAdvice);\n\n    this.url = url;\n    this.apiEndpoint = 'api';\n    this.soundSrc = '' + url;\n    this.init();\n  }\n\n  _createClass(FuckingGreatAdvice, [{\n    key: 'init',\n    value: function init() {\n      this.fetchQuote();\n    }\n  }, {\n    key: 'getApiEndpoint',\n    value: function getApiEndpoint() {\n      var url = this.url,\n          apiEndpoint = this.apiEndpoint;\n\n      return url + '/' + apiEndpoint;\n    }\n  }, {\n    key: 'fetchQuote',\n    value: function fetchQuote() {\n      var _this = this;\n\n      var apiUrl = this.getApiEndpoint();\n      fetch(apiUrl + '/random', {\n        method: 'GET',\n        mode: 'cors'\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        return _this.renderQuote(json.text);\n      });\n    }\n  }, {\n    key: 'renderQuote',\n    value: function renderQuote(text) {\n      this.text = text;\n      var textSelector = document.querySelector('.advice__text');\n      textSelector.innerHTML = text;\n      textSelector.classList.add('advice__text--ready');\n    }\n  }]);\n\n  return FuckingGreatAdvice;\n}();\n\nexports.default = FuckingGreatAdvice;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Popup = function () {\n  function Popup() {\n    _classCallCheck(this, Popup);\n\n    this.initListeners();\n  }\n\n  _createClass(Popup, [{\n    key: \"initListeners\",\n    value: function initListeners() {\n      return this;\n    }\n  }]);\n\n  return Popup;\n}();\n\nexports.default = Popup;\n","'use strict';\n\nvar _FuckingGreatAdvice = require('./FuckingGreatAdvice');\n\nvar _FuckingGreatAdvice2 = _interopRequireDefault(_FuckingGreatAdvice);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var advice = new _FuckingGreatAdvice2.default('http://fucking-great-advice.ru/');\n});\n","'use strict';\n\n// Copyright (c) 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * Get the current URL.\n *\n * @param {function(string)} callback - called when the URL of the current tab\n *   is found.\n */\nfunction getCurrentTabUrl(callback) {\n  // Query filter to be passed to chrome.tabs.query - see\n  // https://developer.chrome.com/extensions/tabs#method-query\n  var queryInfo = {\n    active: true,\n    currentWindow: true\n  };\n\n  chrome.tabs.query(queryInfo, function (tabs) {\n    // chrome.tabs.query invokes the callback with a list of tabs that match the\n    // query. When the popup is opened, there is certainly a window and at least\n    // one tab, so we can safely assume that |tabs| is a non-empty array.\n    // A window can only have one active tab at a time, so the array consists of\n    // exactly one tab.\n    var tab = tabs[0];\n\n    // A tab is a plain object that provides information about the tab.\n    // See https://developer.chrome.com/extensions/tabs#type-Tab\n    var url = tab.url;\n\n    // tab.url is only available if the \"activeTab\" permission is declared.\n    // If you want to see the URL of other tabs (e.g. after removing active:true\n    // from |queryInfo|), then the \"tabs\" permission is required to see their\n    // \"url\" properties.\n    console.assert(typeof url == 'string', 'tab.url should be a string');\n\n    callback(url);\n  });\n\n  // Most methods of the Chrome extension APIs are asynchronous. This means that\n  // you CANNOT do something like this:\n  //\n  // let url;\n  // chrome.tabs.query(queryInfo, function(tabs) {\n  //   url = tabs[0].url;\n  // });\n  // alert(url); // Shows \"undefined\", because chrome.tabs.query is async.\n}\n\n/**\n * @param {string} searchTerm - Search term for Google Image search.\n * @param {function(string,number,number)} callback - Called when an image has\n *   been found. The callback gets the URL, width and height of the image.\n * @param {function(string)} errorCallback - Called when the image is not found.\n *   The callback gets a string that describes the failure reason.\n */\nfunction getImageUrl(searchTerm, callback, errorCallback) {\n  // Google image search - 100 searches per day.\n  // https://developers.google.com/image-search/\n  var searchUrl = 'https://ajax.googleapis.com/ajax/services/search/images' + '?v=1.0&q=' + encodeURIComponent(searchTerm);\n  var x = new XMLHttpRequest();\n  x.open('GET', searchUrl);\n  // The Google image search API responds with JSON, so let Chrome parse it.\n  x.responseType = 'json';\n  x.onload = function () {\n    // Parse and process the response from Google Image Search.\n    var response = x.response;\n    if (!response || !response.responseData || !response.responseData.results || response.responseData.results.length === 0) {\n      errorCallback('No response from Google Image search!');\n      return;\n    }\n    var firstResult = response.responseData.results[0];\n    // Take the thumbnail instead of the full image to get an approximately\n    // consistent image size.\n    var imageUrl = firstResult.tbUrl;\n    var width = parseInt(firstResult.tbWidth);\n    var height = parseInt(firstResult.tbHeight);\n    console.assert(typeof imageUrl == 'string' && !isNaN(width) && !isNaN(height), 'Unexpected respose from the Google Image Search API!');\n    callback(imageUrl, width, height);\n  };\n  x.onerror = function () {\n    errorCallback('Network error.');\n  };\n  x.send();\n}\n\nfunction renderStatus(statusText) {\n  document.getElementById('status').textContent = statusText;\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  getCurrentTabUrl(function (url) {\n    // Put the image URL in Google search.\n    renderStatus('Performing Google Image search for ' + url);\n\n    getImageUrl(url, function (imageUrl, width, height) {\n\n      renderStatus('Search term: ' + url + '\\n' + 'Google image search result: ' + imageUrl);\n      var imageResult = document.getElementById('image-result');\n      // Explicitly set the width/height to minimize the number of reflows. For\n      // a single image, this does not matter, but if you're going to embed\n      // multiple external images in your page, then the absence of width/height\n      // attributes causes the popup to resize multiple times.\n      imageResult.width = width;\n      imageResult.height = height;\n      imageResult.src = imageUrl;\n      imageResult.hidden = false;\n    }, function (errorMessage) {\n      renderStatus('Cannot display image. ' + errorMessage);\n    });\n  });\n});\n"]}